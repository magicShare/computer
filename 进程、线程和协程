GO语言问了协程，协程、线程和进程的区别
今天聊个技术问题。首先可以看看这三个名词的名词解释，这样有个简单的印象。
进程：https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B/382503
线程：https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B
协程：https://zh.wikipedia.org/zh-hans/%E5%8D%8F%E7%A8%8B

关于这个问题，我想从如下三个方面来聊。
一、进程、线程协程的发展背景及原因
从计算机的发展历史来看，进程是最先有的概念。这个是随着操作系统而来的。操作系统是对计算机硬件的一个管理系统，负责着所有硬件的调度。用来去支撑服务于应用程序。当越来越多的应用程序需要在同一台计算上运行的时候，就产生了隔离的需要，这个时候就使用了进程对多个应用进行隔离。所以进程是当时计算执行的最小单元。
随着计算机的发展，人们需要同时执行的应用程序也越来越多，这个时候在多个进程之间切换的时候，就消耗了大量无用的进程切换时间。为了提高CPU的效率，就在进程里面新建了一个线程的概念，线程共享进程所有的数据和进程打开的文件等，但线程有自己独立的栈空间。这样线程间切换的时候，不需要像进程间切换一样需要每次切换保存各项进程数据。这样就提高了CPU的效率。但总体来讲，线程和进程还是由操作系统进行调度。也可以称为内核态调度。
有了线程的概念后，对CPU的利用率是有了较大的提升，但是随着互联网的发展，高并发的系统越来越多，并且每个服务处理过程中，因为内存、硬盘的性能不同，导致很多时候CPU需要在等待IO操作或者网络间服务回复，这个时间线程都在等待，为了减少线程阻塞等待，所以就有了更轻量级，由用户进行调度的协程。协程由用户自己调度，协程是在线程基础上运行。可以简单理解为协程就是用户代码里面的一段过程。协程共享线程所有数据，同时也有自己的栈，但是栈大小比进程小100倍。所以切换效率更高。可以减少线程的IO等待时间。协程比较适用于高并发的服务，但是对大数据量计算并不是特别合适。


二、三者的共同点
有了上面的基本的发展历史的分析，我们可以清晰的看到，三者都是CPU里面的基本的调度单元。都是为了处理一段应用逻辑而提出来的一个抽象的概念。

三、三者的差异点
进程、线程、协程因为发展背景不同，更多的是它们之间的差异。下面我们如下几点差异：
1、调度方式不同
进程和线程是由操作系统调度的，而协程是由用户自由调度，是用户通过应用程序的代码去调度。
2、切换开销不同
进程切换的开销大于线程，线程切换的开销大于协程。本质原因是在多个之间切换的时候，需要保存上一个当时的状态数据。数据量越大，开销越大。
3、数据隔离和共享不同
对于数据隔离，进程是用来隔离不同的应用的。线程则只是隔离线程运行过程中自己的一些运行数据，协程隔离的数据量比线程更小。这也是为何他们的切换开销越来越小的原因。
但是三者其实都是共享进程的代码、堆数据。
4、通信方式不同
进程间通信主要是经由操作系统内核，如管道、信号量、消息、共享内存进行，而线程间的通信则更多的是通过共享数据来实现。协程间通信则是通过封装好的特殊的通道进行，使用操作上更简便。
